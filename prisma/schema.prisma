// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  username      String? @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  addname       String?   @unique
  bio           String?
  location      String?
  website       String?
  birthdate     DateTime?
  createdAt     DateTime  @default(now())
  accounts      Account[] 
  sessions      Session[]
  posts         Post[]    @relation("posted")
  liked         Post[]    @relation("liked")
  bookmarked    Post[]
  followedBy    User[]    @relation("UserFollows")
  following     User[]    @relation("UserFollows")
}

model Post {
  id            Int      @id @default(autoincrement())
  content       String
  datetime_post DateTime @default(now())
  author        User     @relation("posted", fields: [author_id], references: [id], onDelete: Cascade)
  author_id     String
  likedBy       User[]   @relation("liked")
  bookmarkedBy  User[]
  replies       Post[]   @relation("replied")
  parentPost    Post?    @relation("replied", fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id     Int?
}
